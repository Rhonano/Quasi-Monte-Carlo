QuasiAmerPutLSM <- function(Spot = 1, sigma = 0.2, n = 25000, m = 365, Strike = 1.1, 
          r = 0.06, dr = 0, mT = 1, innovation="normal") 
{
  set.seed(25)
  if(innovation=="normal"){
  GBM <- rnorm.pseudo(n = n, dimension = m)
  for (i in 1:n) {
    GBM[i, ] <- Spot * exp(cumsum(((r - dr) * (mT/m) - 0.5 * 
                                     sigma * sigma * (mT/m)) + (sigma * (sqrt(mT/m)) * 
                                                                  GBM[i, ])))}
  }
  if(innovation=="sobol"){
    GBM <- rnorm.sobol(n, m, scrambling = 1)
    for (i in 1:n) {
      GBM[i, ] <- Spot * exp(cumsum(((r - dr) * (mT/m) - 0.5 * 
                                       sigma * sigma * (mT/m)) + (sigma * (sqrt(mT/m)) * 
                                                                    GBM[i, ])))}
  }
  if(innovation=="halton"){
    GBM <- rnorm.halton(n, m)
    for (i in 1:n) {
      GBM[i, ] <- Spot * exp(cumsum(((r - dr) * (mT/m) - 0.5 * 
                                       sigma * sigma * (mT/m)) + (sigma * (sqrt(mT/m)) * 
                                                                    GBM[i, ])))}
  }
  
  X <- ifelse(GBM < Strike, GBM, NA)
  CFL <- matrix(pmax(0, Strike - GBM), nrow = n, ncol = m)
  Xsh <- X[, -m]
  X2sh <- Xsh * Xsh
  Y1 <- CFL * exp(-1 * r * (mT/m))
  Y2 <- cbind((matrix(NA, nrow = n, ncol = m - 1)), Y1[, m])
  CV <- matrix(NA, nrow = n, ncol = m - 1)
  try(for (i in (m - 1):1) {
    reg1 <- lm(Y2[, i + 1] ~ Xsh[, i] + X2sh[, i])
    CV[, i] <- (matrix(reg1$coefficients)[1, 1]) + ((matrix(reg1$coefficients)[2, 
                                                                               1]) * Xsh[, i]) + ((matrix(reg1$coefficients)[3, 
                                                                                                                             1]) * X2sh[, i])
    CV[, i] <- (ifelse(is.na(CV[, i]), 0, CV[, i]))
    Y2[, i] <- ifelse(CFL[, i] > CV[, i], Y1[, i], Y2[, i + 
                                                        1] * exp(-1 * r * (mT/m)))
  }, silent = TRUE)
  CV <- ifelse(is.na(CV), 0, CV)
  CVp <- cbind(CV, (matrix(0, nrow = n, ncol = 1)))
  POF <- ifelse(CVp > CFL, 0, CFL)
  FPOF <- firstValueRow(POF)
  dFPOF <- matrix(NA, nrow = n, ncol = m)
  for (i in 1:m) {
    dFPOF[, i] <- FPOF[, i] * exp(-1 * mT/m * r * i)
  }
  PRICE <- mean(rowSums(dFPOF))
  SE <- sqrt(var(rowSums(dFPOF))/n)
  res <- list(price = (PRICE), Spot, Strike, sigma, n, m, r, 
              dr, mT)
  class(res) <- "AmerPut"
  return(SE)
}
L_QuasiAmerPutLSM <- function(Spot = 1, sigma = 0.2, n = 25000, m = 365, Strike = 1.1, 
                            r = 0.06, dr = 0, mT = 1, innovation="normal") 
{
  set.seed(25)
  if(innovation=="normal"){
    GBM <- rnorm.pseudo(n = n, dimension = m)
    for (i in 1:n) {
      GBM[i, ] <- Spot * exp(cumsum(((r - dr) * (mT/m) - 0.5 * 
                                       sigma * sigma * (mT/m)) + (sigma * (sqrt(mT/m)) * 
                                                                    GBM[i, ])))}
  }
  if(innovation=="sobol"){
    GBM <- rnorm.sobol(n, m, scrambling = 1)
    for (i in 1:n) {
      GBM[i, ] <- Spot * exp(cumsum(((r - dr) * (mT/m) - 0.5 * 
                                       sigma * sigma * (mT/m)) + (sigma * (sqrt(mT/m)) * 
                                                                    GBM[i, ])))}
  }
  if(innovation=="halton"){
    GBM <- rnorm.halton(n, m)
    for (i in 1:n) {
      GBM[i, ] <- Spot * exp(cumsum(((r - dr) * (mT/m) - 0.5 * 
                                       sigma * sigma * (mT/m)) + (sigma * (sqrt(mT/m)) * 
                                                                    GBM[i, ])))}
  }
  
  X <- ifelse(GBM < Strike, GBM, NA)
  CFL <- matrix(pmax(0, Strike - GBM), nrow = n, ncol = m)
  Xsh <- X[, -m]
  X2sh <- Xsh * Xsh
  X0 <- exp(-Xsh/2)
  X1 <- exp(-Xsh/2)*(1-Xsh)
  X2 <- exp(-Xsh/2)*(1-2*Xsh+Xsh^2/2)
  Y1 <- CFL * exp(-1 * r * (mT/m))
  Y2 <- cbind((matrix(NA, nrow = n, ncol = m - 1)), Y1[, m])
  CV <- matrix(NA, nrow = n, ncol = m - 1)
  try(for (i in (m - 1):1) {
    reg1 <- lm(Y2[, i + 1] ~ X0[, i] + X1[, i] + X2[, i])
    CV[, i] <- (matrix(reg1$coefficients)[1, 1]) + ((matrix(reg1$coefficients)[2, 
                                                                               1]) * X0[, i]) + ((matrix(reg1$coefficients)[3, 
                                                                                                                             1]) * X1[, i]) + ((matrix(reg1$coefficients)[4, 
                                                                                                                                                                          1]) * X2[, i])
      
    CV[, i] <- (ifelse(is.na(CV[, i]), 0, CV[, i]))
    Y2[, i] <- ifelse(CFL[, i] > CV[, i], Y1[, i], Y2[, i + 
                                                        1] * exp(-1 * r * (mT/m)))
  }, silent = TRUE)
  CV <- ifelse(is.na(CV), 0, CV)
  CVp <- cbind(CV, (matrix(0, nrow = n, ncol = 1)))
  POF <- ifelse(CVp > CFL, 0, CFL)
  FPOF <- firstValueRow(POF)
  dFPOF <- matrix(NA, nrow = n, ncol = m)
  for (i in 1:m) {
    dFPOF[, i] <- FPOF[, i] * exp(-1 * mT/m * r * i)
  }
  PRICE <- mean(rowSums(dFPOF))
  SE <- sqrt(var(rowSums(dFPOF))/n)
  res <- list(price = (PRICE), Spot, Strike, sigma, n, m, r, 
              dr, mT)
  class(res) <- "AmerPut"
  return(SE)
}
L_QuasiAmerPutLSM_AV <- function (Spot = 1, sigma = 0.2, n = 25000, m = 365, Strike = 1.1, 
                                r = 0.06, dr = 0, mT = 1, innovation="normal") 
{
  set.seed(25)
  if(innovation=="normal"){
    Z <- rnorm.pseudo(n = n, dimension = m)
    aZ <- Z * (-1)
    ZZ <- rbind(Z, aZ)
    GBM <- matrix(NA, nrow = n * 2, ncol = m)
    for (i in 1:(n * 2)) {
      GBM[i, ] <- Spot * exp(cumsum(((r - dr) * (mT/m) - 0.5 * 
                                       sigma * sigma * (mT/m)) + (sigma * (sqrt(mT/m)) * 
                                                                    ZZ[i, ])))}
  }
  if(innovation=="sobol"){
    Z <- rnorm.sobol(n, m, scrambling = 1)
    aZ <- Z * (-1)
    ZZ <- rbind(Z, aZ)
    GBM <- matrix(NA, nrow = n * 2, ncol = m)
    for (i in 1:(n * 2)) {
      GBM[i, ] <- Spot * exp(cumsum(((r - dr) * (mT/m) - 0.5 * 
                                       sigma * sigma * (mT/m)) + (sigma * (sqrt(mT/m)) * 
                                                                    ZZ[i, ])))}
  }
  if(innovation=="halton"){
    Z <- rnorm.halton(n, m)
    aZ <- Z * (-1)
    ZZ <- rbind(Z, aZ)
    GBM <- matrix(NA, nrow = n * 2, ncol = m)
    for (i in 1:(n * 2)) {
      GBM[i, ] <- Spot * exp(cumsum(((r - dr) * (mT/m) - 0.5 * 
                                       sigma * sigma * (mT/m)) + (sigma * (sqrt(mT/m)) * 
                                                                    ZZ[i, ])))}
  }
  X <- ifelse(GBM < Strike, GBM, NA)
  CFL <- matrix(pmax(0, Strike - GBM), nrow = n * 2, ncol = m)
  Xsh <- X[, -m]
  X2sh <- Xsh * Xsh
  X0 <- exp(-Xsh/2)
  X1 <- exp(-Xsh/2)*(1-Xsh)
  X2 <- exp(-Xsh/2)*(1-2*Xsh+Xsh^2/2)
  Y1 <- CFL * exp(-1 * r * (mT/m))
  Y2 <- cbind((matrix(NA, nrow = n * 2, ncol = m - 1)), Y1[, m])
  CV <- matrix(NA, nrow = n * 2, ncol = m - 1)
  try(for (i in (m - 1):1) {
    reg1 <- lm(Y2[, i + 1] ~ X0[, i] + X1[, i]+X2[, i])
    CV[, i] <- (matrix(reg1$coefficients)[1, 1]) + ((matrix(reg1$coefficients)[2, 
                                                                               1]) * X0[, i]) + ((matrix(reg1$coefficients)[3, 
                                                                                                                             1]) * X1[, i])+ ((matrix(reg1$coefficients)[4, 
                                                                                                                                                                           1]) * X2[, i])
    CV[, i] <- (ifelse(is.na(CV[, i]), 0, CV[, i]))
    Y2[, i] <- ifelse(CFL[, i] > CV[, i], Y1[, i], Y2[, i + 
                                                        1] * exp(-1 * r * (mT/m)))
  }, silent = TRUE)
  CV <- ifelse(is.na(CV), 0, CV)
  CVp <- cbind(CV, (matrix(0, nrow = n * 2, ncol = 1)))
  POF <- ifelse(CVp > CFL, 0, CFL)
  FPOF <- firstValueRow(POF)
  dFPOF <- matrix(NA, nrow = n * 2, ncol = m)
  for (i in 1:m) {
    dFPOF[, i] <- FPOF[, i] * exp(-1 * mT/m * r * i)
  }
  PRICE <- mean(rowSums(dFPOF))
  SE <- sqrt(var(rowSums(dFPOF))/n)
  res <- list(price = (PRICE), Spot, Strike, sigma, n, n, m, 
              r, dr, mT)
  class(res) <- "AmerPutAV"
  return(SE)
}

QuasiAmerPutLSM_AV <- function (Spot = 1, sigma = 0.2, n = 25000, m = 365, Strike = 1.1, 
                                r = 0.06, dr = 0, mT = 1, innovation="normal") 
{
  set.seed(25)
  if(innovation=="normal"){
    Z <- rnorm.pseudo(n = n, dimension = m)
    aZ <- Z * (-1)
    ZZ <- rbind(Z, aZ)
    GBM <- matrix(NA, nrow = n * 2, ncol = m)
    for (i in 1:(n * 2)) {
      GBM[i, ] <- Spot * exp(cumsum(((r - dr) * (mT/m) - 0.5 * 
                                       sigma * sigma * (mT/m)) + (sigma * (sqrt(mT/m)) * 
                                                                    ZZ[i, ])))}
  }
  if(innovation=="sobol"){
    Z <- rnorm.sobol(n, m, scrambling = 1)
    aZ <- Z * (-1)
    ZZ <- rbind(Z, aZ)
    GBM <- matrix(NA, nrow = n * 2, ncol = m)
    for (i in 1:(n * 2)) {
      GBM[i, ] <- Spot * exp(cumsum(((r - dr) * (mT/m) - 0.5 * 
                                       sigma * sigma * (mT/m)) + (sigma * (sqrt(mT/m)) * 
                                                                    ZZ[i, ])))}
  }
  if(innovation=="halton"){
    Z <- rnorm.halton(n, m)
    aZ <- Z * (-1)
    ZZ <- rbind(Z, aZ)
    GBM <- matrix(NA, nrow = n * 2, ncol = m)
    for (i in 1:(n * 2)) {
      GBM[i, ] <- Spot * exp(cumsum(((r - dr) * (mT/m) - 0.5 * 
                                       sigma * sigma * (mT/m)) + (sigma * (sqrt(mT/m)) * 
                                                                    ZZ[i, ])))}
  }
  X <- ifelse(GBM < Strike, GBM, NA)
  CFL <- matrix(pmax(0, Strike - GBM), nrow = n * 2, ncol = m)
  Xsh <- X[, -m]
  X2sh <- Xsh * Xsh
  Y1 <- CFL * exp(-1 * r * (mT/m))
  Y2 <- cbind((matrix(NA, nrow = n * 2, ncol = m - 1)), Y1[, m])
  CV <- matrix(NA, nrow = n * 2, ncol = m - 1)
  try(for (i in (m - 1):1) {
    reg1 <- lm(Y2[, i + 1] ~ Xsh[, i] + X2sh[, i])
    CV[, i] <- (matrix(reg1$coefficients)[1, 1]) + ((matrix(reg1$coefficients)[2, 
                                                                               1]) * Xsh[, i]) + ((matrix(reg1$coefficients)[3, 
                                                                                                                             1]) * X2sh[, i])
    CV[, i] <- (ifelse(is.na(CV[, i]), 0, CV[, i]))
    Y2[, i] <- ifelse(CFL[, i] > CV[, i], Y1[, i], Y2[, i + 
                                                        1] * exp(-1 * r * (mT/m)))
  }, silent = TRUE)
  CV <- ifelse(is.na(CV), 0, CV)
  CVp <- cbind(CV, (matrix(0, nrow = n * 2, ncol = 1)))
  POF <- ifelse(CVp > CFL, 0, CFL)
  FPOF <- firstValueRow(POF)
  dFPOF <- matrix(NA, nrow = n * 2, ncol = m)
  for (i in 1:m) {
    dFPOF[, i] <- FPOF[, i] * exp(-1 * mT/m * r * i)
  }
  PRICE <- mean(rowSums(dFPOF))
  SE <- sqrt(var(rowSums(dFPOF))/n)
  res <- list(price = (PRICE), Spot, Strike, sigma, n, n, m, 
              r, dr, mT)
  class(res) <- "AmerPutAV"
  return(SE)
}


QuasiAmerPutLSM_CV <- function (Spot = 1, sigma = 0.2, n = 25000, m = 365, Strike = 1.1, 
                                r = 0.06, dr = 0, mT = 1, innovation="normal") 
{
  set.seed(25)
  if(innovation=="normal"){
    GBM <- rnorm.pseudo(n = n, dimension = m)
    for (i in 1:n) {
      GBM[i, ] <- Spot * exp(cumsum(((r - dr) * (mT/m) - 0.5 * 
                                       sigma * sigma * (mT/m)) + (sigma * (sqrt(mT/m)) * 
                                                                    GBM[i, ])))}
  }
  if(innovation=="sobol"){
    GBM <- rnorm.sobol(n, m, scrambling = 1)
    for (i in 1:n) {
      GBM[i, ] <- Spot * exp(cumsum(((r - dr) * (mT/m) - 0.5 * 
                                       sigma * sigma * (mT/m)) + (sigma * (sqrt(mT/m)) * 
                                                                    GBM[i, ])))}
  }
  if(innovation=="halton"){
    GBM <- rnorm.halton(n, m)
    for (i in 1:n) {
      GBM[i, ] <- Spot * exp(cumsum(((r - dr) * (mT/m) - 0.5 * 
                                       sigma * sigma * (mT/m)) + (sigma * (sqrt(mT/m)) * 
                                                                    GBM[i, ])))}
  }
  
  
  X <- ifelse(GBM < Strike, GBM, NA)
  CFL <- matrix(pmax(0, Strike - GBM), nrow = n, ncol = m)
  Xsh <- X[, -m]
  X2sh <- Xsh * Xsh
  Y1 <- CFL * exp(-1 * r * (mT/m))
  Y2 <- cbind((matrix(NA, nrow = n, ncol = m - 1)), Y1[, m])
  CV <- matrix(NA, nrow = n, ncol = m - 1)
  try(for (i in (m - 1):1) {
    reg1 <- lm(Y2[, i + 1] ~ Xsh[, i] + X2sh[, i])
    CV[, i] <- (matrix(reg1$coefficients)[1, 1]) + ((matrix(reg1$coefficients)[2, 
                                                                               1]) * Xsh[, i]) + ((matrix(reg1$coefficients)[3, 
                                                                                                                             1]) * X2sh[, i])
    CV[, i] <- (ifelse(is.na(CV[, i]), 0, CV[, i]))
    Y2[, i] <- ifelse(CFL[, i] > CV[, i], Y1[, i], Y2[, i + 
                                                        1] * exp(-1 * r * (mT/m)))
  }, silent = TRUE)
  CV <- ifelse(is.na(CV), 0, CV)
  CVp <- cbind(CV, (matrix(0, nrow = n, ncol = 1)))
  POF <- ifelse(CVp > CFL, 0, CFL)
  FPOF <- firstValueRow(POF)
  dFPOF <- matrix(NA, nrow = n, ncol = m)
  for (i in 1:m) {
    dFPOF[, i] <- FPOF[, i] * exp(-1 * mT/m * r * i)
  }
  PRICE1 <- mean(rowSums(dFPOF))
  dCFL <- CFL[, m] * exp(-1 * r * mT)
  EUsimul <- mean(dCFL)
  EUBS <- EuPutBS(Spot, sigma, Strike, r, dr, mT)
  SE <- sqrt(var(rowSums(dFPOF))/n)
  PRICE <- PRICE1 - (EUsimul - EUBS)
  res <- list(price = (PRICE), Spot, Strike, sigma, n, m, r, 
              dr, mT)
  class(res) <- "AmerPutCV"
  return(c(var(rowSums(dFPOF)),var(rowSums(dFPOF) - (dCFL - EUBS))))
}

