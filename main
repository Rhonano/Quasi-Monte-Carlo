library(fOptions)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(LSMonteCarlo)
library(Jdmbs)

N<-50000

sobol_eps<-rnorm.sobol(N, 1, scrambling = 2)
ps_normal_eps<-rnorm.pseudo(n = N, dimension = 1)
halton_eps<-rnorm.halton(n = N, dimension = 1)
normal_eps<-rnorm(N,0,0.1)

#Sobol Innovations
hist(rnorm.sobol(5000, 1, scrambling = 2), main = "Normal Sobol", 
     xlab = "x", col = "steelblue3", border = "white")

#Halton
hist(rnorm.halton(n = 5000, dimension = 1), main = "Normal Halton", 
     xlab = "x", col = "steelblue3", border = "white")

#Normal innovations
hist(rnorm.pseudo(n = 5000, dimension = 5), main="Normal Pseudo", 
     xlab="x", col="steelblue3", border = "white")


gbm_vec <- function(nsim = 100, t = 25, mu = 0, sigma = 0.1, S0 = 100, dt = 1./365, type="normal") {
  
  # matrix of random draws - one for each day for each simulation
  if(type=="normal"){
    epsilon <- matrix(rnorm(t*nsim), ncol = nsim, nrow = t)
  }
  if(type=="sobol"){
    epsilon <- rnorm.sobol(t, nsim, scrambling=2)
  }
  if(type=="halton"){
    epsilon <- rnorm.halton(t,nsim,init=FALSE)
  }
  
  
  # get GBM and convert to price paths
  gbm <- exp((mu - sigma * sigma / 2) * dt + sigma * epsilon * sqrt(dt))
  gbm <- apply(rbind(rep(S0, nsim), gbm), 2, cumprod)
  
  return(gbm)
}


nsim <- 50
t <- 100
mu <- 0.03
sigma <- 0.1
S0 <- 100

gbm_vec(type="sobol")

plot_gbm<- function(type="normal"){
  gbm <- gbm_vec(nsim, t, mu, sigma, S0, type=type)
  gbm_df <- as.data.frame(gbm) %>%
    mutate(ix = 1:nrow(gbm)) %>%
    pivot_longer(-ix, names_to = 'sim', values_to = 'price')
  gbm_df %>%
    ggplot(aes(x=ix, y=price, color=sim)) +
    geom_line() +
    theme(legend.position = 'none')
}

plot_gbm("halton")
plot_gbm("normal")
plot_gbm("sobol")


QuasiAmerPutLSM <- function(Spot = 1, sigma = 0.2, n = 25000, m = 365, Strike = 1.1, 
          r = 0.06, dr = 0, mT = 1, innovation="normal") 
{
  set.seed(25)
  if(innovation=="normal"){
  GBM <- rnorm.pseudo(n = n, dimension = m)
  for (i in 1:n) {
    GBM[i, ] <- Spot * exp(cumsum(((r - dr) * (mT/m) - 0.5 * 
                                     sigma * sigma * (mT/m)) + (sigma * (sqrt(mT/m)) * 
                                                                  GBM[i, ])))}
  }
  if(innovation=="sobol"){
    GBM <- rnorm.sobol(n, m, scrambling = 1)
    for (i in 1:n) {
      GBM[i, ] <- Spot * exp(cumsum(((r - dr) * (mT/m) - 0.5 * 
                                       sigma * sigma * (mT/m)) + (sigma * (sqrt(mT/m)) * 
                                                                    GBM[i, ])))}
  }
  if(innovation=="halton"){
    GBM <- rnorm.halton(n, m,init=FALSE)
    for (i in 1:n) {
      GBM[i, ] <- Spot * exp(cumsum(((r - dr) * (mT/m) - 0.5 * 
                                       sigma * sigma * (mT/m)) + (sigma * (sqrt(mT/m)) * 
                                                                    GBM[i, ])))}
  }
  
  X <- ifelse(GBM < Strike, GBM, NA)
  CFL <- matrix(pmax(0, Strike - GBM), nrow = n, ncol = m)
  Xsh <- X[, -m]
  X2sh <- Xsh * Xsh
  Y1 <- CFL * exp(-1 * r * (mT/m))
  Y2 <- cbind((matrix(NA, nrow = n, ncol = m - 1)), Y1[, m])
  CV <- matrix(NA, nrow = n, ncol = m - 1)
  try(for (i in (m - 1):1) {
    reg1 <- lm(Y2[, i + 1] ~ Xsh[, i] + X2sh[, i])
    CV[, i] <- (matrix(reg1$coefficients)[1, 1]) + ((matrix(reg1$coefficients)[2, 
                                                                               1]) * Xsh[, i]) + ((matrix(reg1$coefficients)[3, 
                                                                                                                             1]) * X2sh[, i])
    CV[, i] <- (ifelse(is.na(CV[, i]), 0, CV[, i]))
    Y2[, i] <- ifelse(CFL[, i] > CV[, i], Y1[, i], Y2[, i + 
                                                        1] * exp(-1 * r * (mT/m)))
  }, silent = TRUE)
  CV <- ifelse(is.na(CV), 0, CV)
  CVp <- cbind(CV, (matrix(0, nrow = n, ncol = 1)))
  POF <- ifelse(CVp > CFL, 0, CFL)
  FPOF <- firstValueRow(POF)
  dFPOF <- matrix(NA, nrow = n, ncol = m)
  for (i in 1:m) {
    dFPOF[, i] <- FPOF[, i] * exp(-1 * mT/m * r * i)
  }
  PRICE <- mean(rowSums(dFPOF))
  res <- list(price = (PRICE), Spot, Strike, sigma, n, m, r, 
              dr, mT)
  class(res) <- "AmerPut"
  return(res)
}

QuasiAmerPutLSM(innovation="normal")
